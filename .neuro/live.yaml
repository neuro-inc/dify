kind: live
title: dify

# other files from https://github.com/langgenius/dify

defaults:
  life_span: 10d

images:
  dify_api:
    ref: langgenius/dify-api:0.8.2
  dify_web:
    ref: langgenius/dify-web:0.8.2
  dify_sandbox:
    ref: langgenius/dify-sandbox:0.2.9

  api:
    ref: image:${{ flow.project_id }}/api
    context: ${{ flow.workspace }}/api
    dockerfile: ${{ flow.workspace }}/api/Dockerfile
    build_preset: gpu-small
  web:
    ref: image:${{ flow.project_id }}/web
    context: ${{ flow.workspace }}/web
    dockerfile: ${{ flow.workspace }}/web/Dockerfile
    build_preset: gpu-small

volumes:
  data:
    remote: storage:$[[ flow.project_id ]]/storage
    mount: /app/api/storage
    local: local_data
  pgdata:
    # remote: disk:dify-pgdata  # onprem
    remote: storage:$[[ flow.project_id ]]/pgdata # scottdc
    mount: /var/lib/postgresql/data
    local: pgdata
  redis:
    # remote: disk:dify-redis  # onprem
    remote: storage:$[[ flow.project_id ]]/redis # scottdc
    mount: /data
  nginx_cfg:
    remote: storage:$[[ flow.project_id ]]/nginx_cfg
    mount: /tmp/nginx_cfg/
    local: docker/nginx/
  huggingface_cache:
    remote: storage:$[[ flow.project_id ]]/huggingface_cache
    mount: /root/.cache/huggingface

jobs:
  api:
    # image: ${{ images.api.ref }}
    image: ${{ images.dify_api.ref }}
    name: api
    preset: cpu-medium
    http_port: "8080"
    detach: true
    volumes:
      - ${{ volumes.data.ref_rw }}
    env:
      MODE: api
      LOG_LEVEL: INFO
      SECRET_KEY: NOT_SECRET
      INIT_PASSWORD: apolo
      CONSOLE_WEB_URL: ""
      CONSOLE_API_URL: ""
      SERVICE_API_URL: ""
      APP_WEB_URL: ""
      FILES_URL: ""
      MIGRATION_ENABLED: "true"
      # DB
      DB_USERNAME: postgres
      DB_PASSWORD: difyai123456
      DB_HOST: ${{ inspect_job('pgvector').internal_hostname_named }}
      DB_PORT: 5432
      DB_DATABASE: dify
      # Redis
      REDIS_HOST: ${{ inspect_job('redis').internal_hostname_named }}
      REDIS_PORT: 6379
      REDIS_USERNAME: ""
      REDIS_PASSWORD: difyai123456
      REDIS_USE_SSL: "false"
      REDIS_DB: 0
      CELERY_BROKER_URL: redis://:difyai123456@${{ inspect_job('redis').internal_hostname_named }}:6379/1
      # CORS
      WEB_API_CORS_ALLOW_ORIGINS: "*"
      CONSOLE_CORS_ALLOW_ORIGINS: "*"
      STORAGE_TYPE: local
      STORAGE_LOCAL_PATH: ${{ volumes.data.mount }}
      # Vector store
      VECTOR_STORE: pgvector
      PGVECTOR_HOST: ${{ inspect_job('pgvector').internal_hostname_named }}
      PGVECTOR_PORT: 5432
      PGVECTOR_USER: postgres
      PGVECTOR_PASSWORD: difyai123456
      PGVECTOR_DATABASE: dify
      # The sandbox service endpoint.
      # CODE_EXECUTION_ENDPOINT: http://${{ inspect_job('sandbox').internal_hostname_named }}:8194
      CODE_EXECUTION_API_KEY: dify-sandbox
      CODE_MAX_NUMBER: 9223372036854775807
      CODE_MIN_NUMBER: -9223372036854775808
      CODE_MAX_STRING_LENGTH: 80000
      TEMPLATE_TRANSFORM_MAX_LENGTH: 80000
      CODE_MAX_STRING_ARRAY_LENGTH: 30
      CODE_MAX_OBJECT_ARRAY_LENGTH: 30
      CODE_MAX_NUMBER_ARRAY_LENGTH: 1000
      # misc
      SENTRY_DSN: ""

  worker:
    # image: ${{ images.api.ref }}
    image: ${{ images.dify_api.ref }}
    preset: cpu-small
    detach: true
    multi: true
    volumes:
      - ${{ volumes.data.ref_rw }}
    env:
      CONSOLE_WEB_URL: ""
      MODE: worker
      ## All the same as for API --->
      LOG_LEVEL: INFO
      SECRET_KEY: NOT_SECRET
      INIT_PASSWORD: apolo
      SERVICE_API_URL: ""
      APP_WEB_URL: ""
      FILES_URL: ""
      MIGRATION_ENABLED: "true"
      # DB
      DB_USERNAME: postgres
      DB_PASSWORD: difyai123456
      DB_HOST: ${{ inspect_job('pgvector').internal_hostname_named }}
      DB_PORT: 5432
      DB_DATABASE: dify
      # Redis
      REDIS_HOST: ${{ inspect_job('redis').internal_hostname_named }}
      REDIS_PORT: 6379
      REDIS_USERNAME: ""
      REDIS_PASSWORD: difyai123456
      REDIS_USE_SSL: "false"
      REDIS_DB: 0
      CELERY_BROKER_URL: redis://:difyai123456@${{ inspect_job('redis').internal_hostname_named }}:6379/1
      # CORS
      WEB_API_CORS_ALLOW_ORIGINS: "*"
      CONSOLE_CORS_ALLOW_ORIGINS: "*"
      STORAGE_TYPE: local
      STORAGE_LOCAL_PATH: ${{ volumes.data.mount }}
      # Vector store
      VECTOR_STORE: pgvector
      PGVECTOR_HOST: ${{ inspect_job('pgvector').internal_hostname_named }}
      PGVECTOR_PORT: 5432
      PGVECTOR_USER: postgres
      PGVECTOR_PASSWORD: difyai123456
      PGVECTOR_DATABASE: dify
      # The sandbox service endpoint.
      # CODE_EXECUTION_ENDPOINT: http://${{ inspect_job('sandbox').internal_hostname_named }}:8194
      CODE_EXECUTION_API_KEY: dify-sandbox
      CODE_MAX_NUMBER: 9223372036854775807
      CODE_MIN_NUMBER: -9223372036854775808
      CODE_MAX_STRING_LENGTH: 80000
      TEMPLATE_TRANSFORM_MAX_LENGTH: 80000
      CODE_MAX_STRING_ARRAY_LENGTH: 30
      CODE_MAX_OBJECT_ARRAY_LENGTH: 30
      CODE_MAX_NUMBER_ARRAY_LENGTH: 1000
      # misc
      SENTRY_DSN: ""

  web:
    # image: ${{ images.web.ref }}
    image: ${{ images.dify_web.ref }}
    name: web
    http_port: "3000"
    detach: true
    env:
      CONSOLE_API_URL: ""
      APP_API_URL: ""
      SENTRY_DSN: ""

  pgvector:
    image: pgvector/pgvector:pg16
    detach: true
    preset: cpu-small
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: difyai123456
      POSTGRES_DB: dify
      PGDATA: ${{ volumes.pgdata.mount }}
    volumes:
      - ${{ volumes.pgdata.ref_rw }}

  redis:
    image: redis:6-alpine
    preset: cpu-small
    detach: true
    volumes:
      - ${{ volumes.redis.ref_rw }}
    cmd: redis-server --requirepass difyai123456

  nginx:
    image: nginx:latest
    detach: true
    browse: true
    http_port: 80
    env:
      DIFY_API_HOST: ${{ inspect_job('api').internal_hostname_named }}
      DIFY_WEB_HOST: ${{ inspect_job('web').internal_hostname_named }}
      NGINX_PORT: 80
      NGINX_WORKER_PROCESSES: auto
      NGINX_CLIENT_MAX_BODY_SIZE: 15M
      NGINX_KEEPALIVE_TIMEOUT: 65
      NGINX_PROXY_READ_TIMEOUT: 3600s
      NGINX_PROXY_SEND_TIMEOUT: 3600s
    volumes:
      - ${{ upload(volumes.nginx_cfg).ref_rw }}
    bash: |
      env_vars=$(printenv | cut -d= -f1 | sed 's/^/$/g' | paste -sd, -)

      envsubst "$env_vars" < ${{ volumes.nginx_cfg.mount }}/conf.d/apolo_flow.conf > /etc/nginx/conf.d/default.conf
      envsubst "$env_vars" < ${{ volumes.nginx_cfg.mount }}/nginx.conf.template > /etc/nginx/nginx.conf
      envsubst "$env_vars" < ${{ volumes.nginx_cfg.mount }}/proxy.conf.template > /etc/nginx/proxy.conf

      # Start Nginx using the default entrypoint
      exec nginx -g 'daemon off;'

  vllm:
    image: vllm/vllm-openai:v0.6.1.post2
    name: vllm
    preset: a100x1
    detach: true
    http_port: "8000"
    volumes:
      - ${{ volumes.huggingface_cache.ref_rw }}
    env:
      HF_TOKEN: secret:HF_TOKEN
    cmd: >
      --model meta-llama/Meta-Llama-3.1-8B-Instruct
      --tokenizer meta-llama/Meta-Llama-3.1-8B-Instruct
      --dtype=half

  tei:
    image: ghcr.io/huggingface/text-embeddings-inference:1.5.0
    name: text-embeddings-inference
    preset: a100x1
    detach: true
    http_port: 3000
    volumes:
      - ${{ volumes.huggingface_cache.ref_rw }}
    env:
      HF_TOKEN: secret:HF_TOKEN
    cmd: >
      --hostname=0.0.0.0
      --port=3000
      --model-id=Snowflake/snowflake-arctic-embed-l
